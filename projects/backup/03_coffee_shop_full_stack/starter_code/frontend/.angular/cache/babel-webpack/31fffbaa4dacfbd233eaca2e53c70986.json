{"ast":null,"code":"import _createForOfIteratorHelper from \"/Users/debasisbehera/Desktop/Learning/Udacity/FSND/projects/03_coffee_shop_full_stack/starter_code/frontend/node_modules/@babel/runtime/helpers/esm/createForOfIteratorHelper\";\nimport _asyncToGenerator from \"/Users/debasisbehera/Desktop/Learning/Udacity/FSND/projects/03_coffee_shop_full_stack/starter_code/frontend/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport _classCallCheck from \"/Users/debasisbehera/Desktop/Learning/Udacity/FSND/projects/03_coffee_shop_full_stack/starter_code/frontend/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/debasisbehera/Desktop/Learning/Udacity/FSND/projects/03_coffee_shop_full_stack/starter_code/frontend/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _regeneratorRuntime from \"/Users/debasisbehera/Desktop/Learning/Udacity/FSND/projects/03_coffee_shop_full_stack/starter_code/frontend/node_modules/@babel/runtime/regenerator\";\nimport { r as registerInstance, e as createEvent, h, i as getElement, H as Host } from './index-7a8b7a1c.js';\nimport { b as getIonMode, c as config } from './ionic-global-63a97a32.js';\nimport { g as getTimeGivenProgression } from './cubic-bezier-eea9a7a9.js';\nimport { l as assert } from './helpers-dd7e4b7b.js';\nimport { l as lifecycle, t as _transition, s as setPageHidden, d as LIFECYCLE_WILL_UNLOAD, b as LIFECYCLE_WILL_LEAVE, c as LIFECYCLE_DID_LEAVE } from './index-931440b1.js';\nimport { a as attachComponent } from './framework-delegate-4392cd63.js';\nvar VIEW_STATE_NEW = 1;\nvar VIEW_STATE_ATTACHED = 2;\nvar VIEW_STATE_DESTROYED = 3;\n\nvar ViewController = /*#__PURE__*/function () {\n  function ViewController(component, params) {\n    _classCallCheck(this, ViewController);\n\n    this.component = component;\n    this.params = params;\n    this.state = VIEW_STATE_NEW;\n  }\n\n  _createClass(ViewController, [{\n    key: \"init\",\n    value: function () {\n      var _init = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(container) {\n        var component;\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                this.state = VIEW_STATE_ATTACHED;\n\n                if (this.element) {\n                  _context.next = 6;\n                  break;\n                }\n\n                component = this.component;\n                _context.next = 5;\n                return attachComponent(this.delegate, container, component, ['ion-page', 'ion-page-invisible'], this.params);\n\n              case 5:\n                this.element = _context.sent;\n\n              case 6:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, this);\n      }));\n\n      function init(_x) {\n        return _init.apply(this, arguments);\n      }\n\n      return init;\n    }()\n    /**\n     * DOM WRITE\n     */\n\n  }, {\n    key: \"_destroy\",\n    value: function _destroy() {\n      assert(this.state !== VIEW_STATE_DESTROYED, 'view state must be ATTACHED');\n      var element = this.element;\n\n      if (element) {\n        if (this.delegate) {\n          this.delegate.removeViewFromDom(element.parentElement, element);\n        } else {\n          element.remove();\n        }\n      }\n\n      this.nav = undefined;\n      this.state = VIEW_STATE_DESTROYED;\n    }\n  }]);\n\n  return ViewController;\n}();\n\nvar matches = function matches(view, id, params) {\n  if (!view) {\n    return false;\n  }\n\n  if (view.component !== id) {\n    return false;\n  }\n\n  var currentParams = view.params;\n\n  if (currentParams === params) {\n    return true;\n  }\n\n  if (!currentParams && !params) {\n    return true;\n  }\n\n  if (!currentParams || !params) {\n    return false;\n  }\n\n  var keysA = Object.keys(currentParams);\n  var keysB = Object.keys(params);\n\n  if (keysA.length !== keysB.length) {\n    return false;\n  } // Test for A's keys different from B.\n\n\n  for (var _i = 0, _keysA = keysA; _i < _keysA.length; _i++) {\n    var key = _keysA[_i];\n\n    if (currentParams[key] !== params[key]) {\n      return false;\n    }\n  }\n\n  return true;\n};\n\nvar convertToView = function convertToView(page, params) {\n  if (!page) {\n    return null;\n  }\n\n  if (page instanceof ViewController) {\n    return page;\n  }\n\n  return new ViewController(page, params);\n};\n\nvar convertToViews = function convertToViews(pages) {\n  return pages.map(function (page) {\n    if (page instanceof ViewController) {\n      return page;\n    }\n\n    if ('component' in page) {\n      /**\n       * TODO Ionic 6:\n       * Consider switching to just using `undefined` here\n       * as well as on the public interfaces and on\n       * `NavComponentWithProps`. Previously `pages` was\n       * of type `any[]` so TypeScript did not catch this.\n       */\n      return convertToView(page.component, page.componentProps === null ? undefined : page.componentProps);\n    }\n\n    return convertToView(page, undefined);\n  }).filter(function (v) {\n    return v !== null;\n  });\n};\n\nvar navCss = \":host{left:0;right:0;top:0;bottom:0;position:absolute;contain:layout size style;overflow:hidden;z-index:0}\";\n\nvar Nav = /*#__PURE__*/function () {\n  function Nav(hostRef) {\n    _classCallCheck(this, Nav);\n\n    registerInstance(this, hostRef);\n    this.ionNavWillLoad = createEvent(this, \"ionNavWillLoad\", 7);\n    this.ionNavWillChange = createEvent(this, \"ionNavWillChange\", 3);\n    this.ionNavDidChange = createEvent(this, \"ionNavDidChange\", 3);\n    this.transInstr = [];\n    this.animationEnabled = true;\n    this.useRouter = false;\n    this.isTransitioning = false;\n    this.destroyed = false;\n    this.views = [];\n    /**\n     * If `true`, the nav should animate the transition of components.\n     */\n\n    this.animated = true;\n  }\n\n  _createClass(Nav, [{\n    key: \"swipeGestureChanged\",\n    value: function swipeGestureChanged() {\n      if (this.gesture) {\n        this.gesture.enable(this.swipeGesture === true);\n      }\n    }\n  }, {\n    key: \"rootChanged\",\n    value: function rootChanged() {\n      if (this.root !== undefined) {\n        if (!this.useRouter) {\n          this.setRoot(this.root, this.rootParams);\n        }\n      }\n    }\n  }, {\n    key: \"componentWillLoad\",\n    value: function componentWillLoad() {\n      this.useRouter = !!document.querySelector('ion-router') && !this.el.closest('[no-router]');\n\n      if (this.swipeGesture === undefined) {\n        var mode = getIonMode(this);\n        this.swipeGesture = config.getBoolean('swipeBackEnabled', mode === 'ios');\n      }\n\n      this.ionNavWillLoad.emit();\n    }\n  }, {\n    key: \"componentDidLoad\",\n    value: function () {\n      var _componentDidLoad = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2() {\n        return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                this.rootChanged();\n                _context2.next = 3;\n                return import('./swipe-back-fae97365.js');\n\n              case 3:\n                this.gesture = _context2.sent.createSwipeBackGesture(this.el, this.canStart.bind(this), this.onStart.bind(this), this.onMove.bind(this), this.onEnd.bind(this));\n                this.swipeGestureChanged();\n\n              case 5:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2, this);\n      }));\n\n      function componentDidLoad() {\n        return _componentDidLoad.apply(this, arguments);\n      }\n\n      return componentDidLoad;\n    }()\n  }, {\n    key: \"disconnectedCallback\",\n    value: function disconnectedCallback() {\n      var _iterator = _createForOfIteratorHelper(this.views),\n          _step;\n\n      try {\n        for (_iterator.s(); !(_step = _iterator.n()).done;) {\n          var view = _step.value;\n          lifecycle(view.element, LIFECYCLE_WILL_UNLOAD);\n\n          view._destroy();\n        }\n      } catch (err) {\n        _iterator.e(err);\n      } finally {\n        _iterator.f();\n      }\n\n      if (this.gesture) {\n        this.gesture.destroy();\n        this.gesture = undefined;\n      } // release swipe back gesture and transition\n\n\n      this.transInstr.length = this.views.length = 0;\n      this.destroyed = true;\n    }\n    /**\n     * Push a new component onto the current navigation stack. Pass any additional\n     * information along as an object. This additional information is accessible\n     * through NavParams.\n     *\n     * @param component The component to push onto the navigation stack.\n     * @param componentProps Any properties of the component.\n     * @param opts The navigation options.\n     * @param done The transition complete function.\n     */\n\n  }, {\n    key: \"push\",\n    value: function push(component, componentProps, opts, done) {\n      return this.queueTrns({\n        insertStart: -1,\n        insertViews: [{\n          component: component,\n          componentProps: componentProps\n        }],\n        opts: opts\n      }, done);\n    }\n    /**\n     * Inserts a component into the navigation stack at the specified index.\n     * This is useful to add a component at any point in the navigation stack.\n     *\n     * @param insertIndex The index to insert the component at in the stack.\n     * @param component The component to insert into the navigation stack.\n     * @param componentProps Any properties of the component.\n     * @param opts The navigation options.\n     * @param done The transition complete function.\n     */\n\n  }, {\n    key: \"insert\",\n    value: function insert(insertIndex, component, componentProps, opts, done) {\n      return this.queueTrns({\n        insertStart: insertIndex,\n        insertViews: [{\n          component: component,\n          componentProps: componentProps\n        }],\n        opts: opts\n      }, done);\n    }\n    /**\n     * Inserts an array of components into the navigation stack at the specified index.\n     * The last component in the array will become instantiated as a view, and animate\n     * in to become the active view.\n     *\n     * @param insertIndex The index to insert the components at in the stack.\n     * @param insertComponents The components to insert into the navigation stack.\n     * @param opts The navigation options.\n     * @param done The transition complete function.\n     */\n\n  }, {\n    key: \"insertPages\",\n    value: function insertPages(insertIndex, insertComponents, opts, done) {\n      return this.queueTrns({\n        insertStart: insertIndex,\n        insertViews: insertComponents,\n        opts: opts\n      }, done);\n    }\n    /**\n     * Pop a component off of the navigation stack. Navigates back from the current\n     * component.\n     *\n     * @param opts The navigation options.\n     * @param done The transition complete function.\n     */\n\n  }, {\n    key: \"pop\",\n    value: function pop(opts, done) {\n      return this.queueTrns({\n        removeStart: -1,\n        removeCount: 1,\n        opts: opts\n      }, done);\n    }\n    /**\n     * Pop to a specific index in the navigation stack.\n     *\n     * @param indexOrViewCtrl The index or view controller to pop to.\n     * @param opts The navigation options.\n     * @param done The transition complete function.\n     */\n\n  }, {\n    key: \"popTo\",\n    value: function popTo(indexOrViewCtrl, opts, done) {\n      var tiConfig = {\n        removeStart: -1,\n        removeCount: -1,\n        opts: opts\n      };\n\n      if (typeof indexOrViewCtrl === 'object' && indexOrViewCtrl.component) {\n        tiConfig.removeView = indexOrViewCtrl;\n        tiConfig.removeStart = 1;\n      } else if (typeof indexOrViewCtrl === 'number') {\n        tiConfig.removeStart = indexOrViewCtrl + 1;\n      }\n\n      return this.queueTrns(tiConfig, done);\n    }\n    /**\n     * Navigate back to the root of the stack, no matter how far back that is.\n     *\n     * @param opts The navigation options.\n     * @param done The transition complete function.\n     */\n\n  }, {\n    key: \"popToRoot\",\n    value: function popToRoot(opts, done) {\n      return this.queueTrns({\n        removeStart: 1,\n        removeCount: -1,\n        opts: opts\n      }, done);\n    }\n    /**\n     * Removes a component from the navigation stack at the specified index.\n     *\n     * @param startIndex The number to begin removal at.\n     * @param removeCount The number of components to remove.\n     * @param opts The navigation options.\n     * @param done The transition complete function.\n     */\n\n  }, {\n    key: \"removeIndex\",\n    value: function removeIndex(startIndex) {\n      var removeCount = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 1;\n      var opts = arguments.length > 2 ? arguments[2] : undefined;\n      var done = arguments.length > 3 ? arguments[3] : undefined;\n      return this.queueTrns({\n        removeStart: startIndex,\n        removeCount: removeCount,\n        opts: opts\n      }, done);\n    }\n    /**\n     * Set the root for the current navigation stack to a component.\n     *\n     * @param component The component to set as the root of the navigation stack.\n     * @param componentProps Any properties of the component.\n     * @param opts The navigation options.\n     * @param done The transition complete function.\n     */\n\n  }, {\n    key: \"setRoot\",\n    value: function setRoot(component, componentProps, opts, done) {\n      return this.setPages([{\n        component: component,\n        componentProps: componentProps\n      }], opts, done);\n    }\n    /**\n     * Set the views of the current navigation stack and navigate to the last view.\n     * By default animations are disabled, but they can be enabled by passing options\n     * to the navigation controller. Navigation parameters can also be passed to the\n     * individual pages in the array.\n     *\n     * @param views The list of views to set as the navigation stack.\n     * @param opts The navigation options.\n     * @param done The transition complete function.\n     */\n\n  }, {\n    key: \"setPages\",\n    value: function setPages(views, opts, done) {\n      if (opts == null) {\n        opts = {};\n      } // if animation wasn't set to true then default it to NOT animate\n\n\n      if (opts.animated !== true) {\n        opts.animated = false;\n      }\n\n      return this.queueTrns({\n        insertStart: 0,\n        insertViews: views,\n        removeStart: 0,\n        removeCount: -1,\n        opts: opts\n      }, done);\n    }\n    /** @internal */\n\n  }, {\n    key: \"setRouteId\",\n    value: function setRouteId(id, params, direction, animation) {\n      var active = this.getActiveSync();\n\n      if (matches(active, id, params)) {\n        return Promise.resolve({\n          changed: false,\n          element: active.element\n        });\n      }\n\n      var resolve;\n      var promise = new Promise(function (r) {\n        return resolve = r;\n      });\n      var finish;\n      var commonOpts = {\n        updateURL: false,\n        viewIsReady: function viewIsReady(enteringEl) {\n          var mark;\n          var p = new Promise(function (r) {\n            return mark = r;\n          });\n          resolve({\n            changed: true,\n            element: enteringEl,\n            markVisible: function () {\n              var _markVisible = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee3() {\n                return _regeneratorRuntime.wrap(function _callee3$(_context3) {\n                  while (1) {\n                    switch (_context3.prev = _context3.next) {\n                      case 0:\n                        mark();\n                        _context3.next = 3;\n                        return finish;\n\n                      case 3:\n                      case \"end\":\n                        return _context3.stop();\n                    }\n                  }\n                }, _callee3);\n              }));\n\n              function markVisible() {\n                return _markVisible.apply(this, arguments);\n              }\n\n              return markVisible;\n            }()\n          });\n          return p;\n        }\n      };\n\n      if (direction === 'root') {\n        finish = this.setRoot(id, params, commonOpts);\n      } else {\n        var viewController = this.views.find(function (v) {\n          return matches(v, id, params);\n        });\n\n        if (viewController) {\n          finish = this.popTo(viewController, Object.assign(Object.assign({}, commonOpts), {\n            direction: 'back',\n            animationBuilder: animation\n          }));\n        } else if (direction === 'forward') {\n          finish = this.push(id, params, Object.assign(Object.assign({}, commonOpts), {\n            animationBuilder: animation\n          }));\n        } else if (direction === 'back') {\n          finish = this.setRoot(id, params, Object.assign(Object.assign({}, commonOpts), {\n            direction: 'back',\n            animated: true,\n            animationBuilder: animation\n          }));\n        }\n      }\n\n      return promise;\n    }\n    /** @internal */\n\n  }, {\n    key: \"getRouteId\",\n    value: function () {\n      var _getRouteId = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee4() {\n        var active;\n        return _regeneratorRuntime.wrap(function _callee4$(_context4) {\n          while (1) {\n            switch (_context4.prev = _context4.next) {\n              case 0:\n                active = this.getActiveSync();\n                return _context4.abrupt(\"return\", active ? {\n                  id: active.element.tagName,\n                  params: active.params,\n                  element: active.element\n                } : undefined);\n\n              case 2:\n              case \"end\":\n                return _context4.stop();\n            }\n          }\n        }, _callee4, this);\n      }));\n\n      function getRouteId() {\n        return _getRouteId.apply(this, arguments);\n      }\n\n      return getRouteId;\n    }()\n    /**\n     * Get the active view.\n     */\n\n  }, {\n    key: \"getActive\",\n    value: function getActive() {\n      return Promise.resolve(this.getActiveSync());\n    }\n    /**\n     * Get the view at the specified index.\n     *\n     * @param index The index of the view.\n     */\n\n  }, {\n    key: \"getByIndex\",\n    value: function getByIndex(index) {\n      return Promise.resolve(this.views[index]);\n    }\n    /**\n     * Returns `true` if the current view can go back.\n     *\n     * @param view The view to check.\n     */\n\n  }, {\n    key: \"canGoBack\",\n    value: function canGoBack(view) {\n      return Promise.resolve(this.canGoBackSync(view));\n    }\n    /**\n     * Get the previous view.\n     *\n     * @param view The view to get.\n     */\n\n  }, {\n    key: \"getPrevious\",\n    value: function getPrevious(view) {\n      return Promise.resolve(this.getPreviousSync(view));\n    }\n  }, {\n    key: \"getLength\",\n    value: function getLength() {\n      return this.views.length;\n    }\n  }, {\n    key: \"getActiveSync\",\n    value: function getActiveSync() {\n      return this.views[this.views.length - 1];\n    }\n  }, {\n    key: \"canGoBackSync\",\n    value: function canGoBackSync() {\n      var view = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : this.getActiveSync();\n      return !!(view && this.getPreviousSync(view));\n    }\n  }, {\n    key: \"getPreviousSync\",\n    value: function getPreviousSync() {\n      var view = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : this.getActiveSync();\n\n      if (!view) {\n        return undefined;\n      }\n\n      var views = this.views;\n      var index = views.indexOf(view);\n      return index > 0 ? views[index - 1] : undefined;\n    } // _queueTrns() adds a navigation stack change to the queue and schedules it to run:\n    // 1. _nextTrns(): consumes the next transition in the queue\n    // 2. _viewInit(): initializes enteringView if required\n    // 3. _viewTest(): ensures canLeave/canEnter Returns `true`, so the operation can continue\n    // 4. _postViewInit(): add/remove the views from the navigation stack\n    // 5. _transitionInit(): initializes the visual transition if required and schedules it to run\n    // 6. _viewAttachToDOM(): attaches the enteringView to the DOM\n    // 7. _transitionStart(): called once the transition actually starts, it initializes the Animation underneath.\n    // 8. _transitionFinish(): called once the transition finishes\n    // 9. _cleanup(): syncs the navigation internal state with the DOM. For example it removes the pages from the DOM or hides/show them.\n\n  }, {\n    key: \"queueTrns\",\n    value: function () {\n      var _queueTrns = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee5(ti, done) {\n        var promise, router, canTransition;\n        return _regeneratorRuntime.wrap(function _callee5$(_context5) {\n          while (1) {\n            switch (_context5.prev = _context5.next) {\n              case 0:\n                if (!(this.isTransitioning && ti.opts != null && ti.opts.skipIfBusy)) {\n                  _context5.next = 2;\n                  break;\n                }\n\n                return _context5.abrupt(\"return\", Promise.resolve(false));\n\n              case 2:\n                promise = new Promise(function (resolve, reject) {\n                  ti.resolve = resolve;\n                  ti.reject = reject;\n                });\n                ti.done = done;\n                /**\n                 * If using router, check to see if navigation hooks\n                 * will allow us to perform this transition. This\n                 * is required in order for hooks to work with\n                 * the ion-back-button or swipe to go back.\n                 */\n\n                if (!(ti.opts && ti.opts.updateURL !== false && this.useRouter)) {\n                  _context5.next = 17;\n                  break;\n                }\n\n                router = document.querySelector('ion-router');\n\n                if (!router) {\n                  _context5.next = 17;\n                  break;\n                }\n\n                _context5.next = 9;\n                return router.canTransition();\n\n              case 9:\n                canTransition = _context5.sent;\n\n                if (!(canTransition === false)) {\n                  _context5.next = 14;\n                  break;\n                }\n\n                return _context5.abrupt(\"return\", Promise.resolve(false));\n\n              case 14:\n                if (!(typeof canTransition === 'string')) {\n                  _context5.next = 17;\n                  break;\n                }\n\n                router.push(canTransition, ti.opts.direction || 'back');\n                return _context5.abrupt(\"return\", Promise.resolve(false));\n\n              case 17:\n                // Normalize empty\n                if (ti.insertViews && ti.insertViews.length === 0) {\n                  ti.insertViews = undefined;\n                } // Enqueue transition instruction\n\n\n                this.transInstr.push(ti); // if there isn't a transition already happening\n                // then this will kick off this transition\n\n                this.nextTrns();\n                return _context5.abrupt(\"return\", promise);\n\n              case 21:\n              case \"end\":\n                return _context5.stop();\n            }\n          }\n        }, _callee5, this);\n      }));\n\n      function queueTrns(_x2, _x3) {\n        return _queueTrns.apply(this, arguments);\n      }\n\n      return queueTrns;\n    }()\n  }, {\n    key: \"success\",\n    value: function success(result, ti) {\n      if (this.destroyed) {\n        this.fireError('nav controller was destroyed', ti);\n        return;\n      }\n\n      if (ti.done) {\n        ti.done(result.hasCompleted, result.requiresTransition, result.enteringView, result.leavingView, result.direction);\n      }\n\n      ti.resolve(result.hasCompleted);\n\n      if (ti.opts.updateURL !== false && this.useRouter) {\n        var router = document.querySelector('ion-router');\n\n        if (router) {\n          var direction = result.direction === 'back' ? 'back' : 'forward';\n          router.navChanged(direction);\n        }\n      }\n    }\n  }, {\n    key: \"failed\",\n    value: function failed(rejectReason, ti) {\n      if (this.destroyed) {\n        this.fireError('nav controller was destroyed', ti);\n        return;\n      }\n\n      this.transInstr.length = 0;\n      this.fireError(rejectReason, ti);\n    }\n  }, {\n    key: \"fireError\",\n    value: function fireError(rejectReason, ti) {\n      if (ti.done) {\n        ti.done(false, false, rejectReason);\n      }\n\n      if (ti.reject && !this.destroyed) {\n        ti.reject(rejectReason);\n      } else {\n        ti.resolve(false);\n      }\n    }\n  }, {\n    key: \"nextTrns\",\n    value: function nextTrns() {\n      // this is the framework's bread 'n butta function\n      // only one transition is allowed at any given time\n      if (this.isTransitioning) {\n        return false;\n      } // there is no transition happening right now\n      // get the next instruction\n\n\n      var ti = this.transInstr.shift();\n\n      if (!ti) {\n        return false;\n      }\n\n      this.runTransition(ti);\n      return true;\n    }\n  }, {\n    key: \"runTransition\",\n    value: function () {\n      var _runTransition = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee6(ti) {\n        var leavingView, enteringView, requiresTransition, isBackDirection, result;\n        return _regeneratorRuntime.wrap(function _callee6$(_context6) {\n          while (1) {\n            switch (_context6.prev = _context6.next) {\n              case 0:\n                _context6.prev = 0;\n                // set that this nav is actively transitioning\n                this.ionNavWillChange.emit();\n                this.isTransitioning = true;\n                this.prepareTI(ti);\n                leavingView = this.getActiveSync();\n                enteringView = this.getEnteringView(ti, leavingView);\n\n                if (!(!leavingView && !enteringView)) {\n                  _context6.next = 8;\n                  break;\n                }\n\n                throw new Error('no views in the stack to be removed');\n\n              case 8:\n                if (!(enteringView && enteringView.state === VIEW_STATE_NEW)) {\n                  _context6.next = 11;\n                  break;\n                }\n\n                _context6.next = 11;\n                return enteringView.init(this.el);\n\n              case 11:\n                this.postViewInit(enteringView, leavingView, ti); // Needs transition?\n\n                requiresTransition = (ti.enteringRequiresTransition || ti.leavingRequiresTransition) && enteringView !== leavingView;\n\n                if (requiresTransition && ti.opts && leavingView) {\n                  isBackDirection = ti.opts.direction === 'back';\n                  /**\n                   * If heading back, use the entering page's animation\n                   * unless otherwise specified by the developer.\n                   */\n\n                  if (isBackDirection) {\n                    ti.opts.animationBuilder = ti.opts.animationBuilder || enteringView && enteringView.animationBuilder;\n                  }\n\n                  leavingView.animationBuilder = ti.opts.animationBuilder;\n                }\n\n                if (!requiresTransition) {\n                  _context6.next = 20;\n                  break;\n                }\n\n                _context6.next = 17;\n                return this.transition(enteringView, leavingView, ti);\n\n              case 17:\n                _context6.t0 = _context6.sent;\n                _context6.next = 21;\n                break;\n\n              case 20:\n                _context6.t0 = {\n                  // transition is not required, so we are already done!\n                  // they're inserting/removing the views somewhere in the middle or\n                  // beginning, so visually nothing needs to animate/transition\n                  // resolve immediately because there's no animation that's happening\n                  hasCompleted: true,\n                  requiresTransition: false\n                };\n\n              case 21:\n                result = _context6.t0;\n                this.success(result, ti);\n                this.ionNavDidChange.emit();\n                _context6.next = 29;\n                break;\n\n              case 26:\n                _context6.prev = 26;\n                _context6.t1 = _context6[\"catch\"](0);\n                this.failed(_context6.t1, ti);\n\n              case 29:\n                this.isTransitioning = false;\n                this.nextTrns();\n\n              case 31:\n              case \"end\":\n                return _context6.stop();\n            }\n          }\n        }, _callee6, this, [[0, 26]]);\n      }));\n\n      function runTransition(_x4) {\n        return _runTransition.apply(this, arguments);\n      }\n\n      return runTransition;\n    }()\n  }, {\n    key: \"prepareTI\",\n    value: function prepareTI(ti) {\n      var viewsLength = this.views.length;\n      ti.opts = ti.opts || {};\n\n      if (ti.opts.delegate === undefined) {\n        ti.opts.delegate = this.delegate;\n      }\n\n      if (ti.removeView !== undefined) {\n        assert(ti.removeStart !== undefined, 'removeView needs removeStart');\n        assert(ti.removeCount !== undefined, 'removeView needs removeCount');\n        var index = this.views.indexOf(ti.removeView);\n\n        if (index < 0) {\n          throw new Error('removeView was not found');\n        }\n\n        ti.removeStart += index;\n      }\n\n      if (ti.removeStart !== undefined) {\n        if (ti.removeStart < 0) {\n          ti.removeStart = viewsLength - 1;\n        }\n\n        if (ti.removeCount < 0) {\n          ti.removeCount = viewsLength - ti.removeStart;\n        }\n\n        ti.leavingRequiresTransition = ti.removeCount > 0 && ti.removeStart + ti.removeCount === viewsLength;\n      }\n\n      if (ti.insertViews) {\n        // allow -1 to be passed in to auto push it on the end\n        // and clean up the index if it's larger then the size of the stack\n        if (ti.insertStart < 0 || ti.insertStart > viewsLength) {\n          ti.insertStart = viewsLength;\n        }\n\n        ti.enteringRequiresTransition = ti.insertStart === viewsLength;\n      }\n\n      var insertViews = ti.insertViews;\n\n      if (!insertViews) {\n        return;\n      }\n\n      assert(insertViews.length > 0, 'length can not be zero');\n      var viewControllers = convertToViews(insertViews);\n\n      if (viewControllers.length === 0) {\n        throw new Error('invalid views to insert');\n      } // Check all the inserted view are correct\n\n\n      var _iterator2 = _createForOfIteratorHelper(viewControllers),\n          _step2;\n\n      try {\n        for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {\n          var view = _step2.value;\n          view.delegate = ti.opts.delegate;\n          var nav = view.nav;\n\n          if (nav && nav !== this) {\n            throw new Error('inserted view was already inserted');\n          }\n\n          if (view.state === VIEW_STATE_DESTROYED) {\n            throw new Error('inserted view was already destroyed');\n          }\n        }\n      } catch (err) {\n        _iterator2.e(err);\n      } finally {\n        _iterator2.f();\n      }\n\n      ti.insertViews = viewControllers;\n    }\n  }, {\n    key: \"getEnteringView\",\n    value: function getEnteringView(ti, leavingView) {\n      var insertViews = ti.insertViews;\n\n      if (insertViews !== undefined) {\n        // grab the very last view of the views to be inserted\n        // and initialize it as the new entering view\n        return insertViews[insertViews.length - 1];\n      }\n\n      var removeStart = ti.removeStart;\n\n      if (removeStart !== undefined) {\n        var views = this.views;\n        var removeEnd = removeStart + ti.removeCount;\n\n        for (var i = views.length - 1; i >= 0; i--) {\n          var view = views[i];\n\n          if ((i < removeStart || i >= removeEnd) && view !== leavingView) {\n            return view;\n          }\n        }\n      }\n\n      return undefined;\n    }\n  }, {\n    key: \"postViewInit\",\n    value: function postViewInit(enteringView, leavingView, ti) {\n      assert(leavingView || enteringView, 'Both leavingView and enteringView are null');\n      assert(ti.resolve, 'resolve must be valid');\n      assert(ti.reject, 'reject must be valid');\n      var opts = ti.opts;\n      var insertViews = ti.insertViews;\n      var removeStart = ti.removeStart;\n      var removeCount = ti.removeCount;\n      var destroyQueue; // there are views to remove\n\n      if (removeStart !== undefined && removeCount !== undefined) {\n        assert(removeStart >= 0, 'removeStart can not be negative');\n        assert(removeCount >= 0, 'removeCount can not be negative');\n        destroyQueue = [];\n\n        for (var i = 0; i < removeCount; i++) {\n          var view = this.views[i + removeStart];\n\n          if (view && view !== enteringView && view !== leavingView) {\n            destroyQueue.push(view);\n          }\n        } // default the direction to \"back\"\n\n\n        opts.direction = opts.direction || 'back';\n      }\n\n      var finalBalance = this.views.length + (insertViews !== undefined ? insertViews.length : 0) - (removeCount !== undefined ? removeCount : 0);\n      assert(finalBalance >= 0, 'final balance can not be negative');\n\n      if (finalBalance === 0) {\n        console.warn(\"You can't remove all the pages in the navigation stack. nav.pop() is probably called too many times.\", this, this.el);\n        throw new Error('navigation stack needs at least one root page');\n      } // At this point the transition can not be rejected, any throw should be an error\n      // there are views to insert\n\n\n      if (insertViews) {\n        // add the views to the\n        var insertIndex = ti.insertStart;\n\n        var _iterator3 = _createForOfIteratorHelper(insertViews),\n            _step3;\n\n        try {\n          for (_iterator3.s(); !(_step3 = _iterator3.n()).done;) {\n            var _view = _step3.value;\n            this.insertViewAt(_view, insertIndex);\n            insertIndex++;\n          }\n        } catch (err) {\n          _iterator3.e(err);\n        } finally {\n          _iterator3.f();\n        }\n\n        if (ti.enteringRequiresTransition) {\n          // default to forward if not already set\n          opts.direction = opts.direction || 'forward';\n        }\n      } // if the views to be removed are in the beginning or middle\n      // and there is not a view that needs to visually transition out\n      // then just destroy them and don't transition anything\n      // batch all of lifecycles together\n      // let's make sure, callbacks are zoned\n\n\n      if (destroyQueue && destroyQueue.length > 0) {\n        var _iterator4 = _createForOfIteratorHelper(destroyQueue),\n            _step4;\n\n        try {\n          for (_iterator4.s(); !(_step4 = _iterator4.n()).done;) {\n            var _view2 = _step4.value;\n            lifecycle(_view2.element, LIFECYCLE_WILL_LEAVE);\n            lifecycle(_view2.element, LIFECYCLE_DID_LEAVE);\n            lifecycle(_view2.element, LIFECYCLE_WILL_UNLOAD);\n          } // once all lifecycle events has been delivered, we can safely detroy the views\n\n        } catch (err) {\n          _iterator4.e(err);\n        } finally {\n          _iterator4.f();\n        }\n\n        var _iterator5 = _createForOfIteratorHelper(destroyQueue),\n            _step5;\n\n        try {\n          for (_iterator5.s(); !(_step5 = _iterator5.n()).done;) {\n            var _view3 = _step5.value;\n            this.destroyView(_view3);\n          }\n        } catch (err) {\n          _iterator5.e(err);\n        } finally {\n          _iterator5.f();\n        }\n      }\n    }\n  }, {\n    key: \"transition\",\n    value: function () {\n      var _transition2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee7(enteringView, leavingView, ti) {\n        var _this = this;\n\n        var opts, progressCallback, mode, enteringEl, leavingEl, animationOpts, _yield$_transition, hasCompleted;\n\n        return _regeneratorRuntime.wrap(function _callee7$(_context7) {\n          while (1) {\n            switch (_context7.prev = _context7.next) {\n              case 0:\n                // we should animate (duration > 0) if the pushed page is not the first one (startup)\n                // or if it is a portal (modal, actionsheet, etc.)\n                opts = ti.opts;\n                progressCallback = opts.progressAnimation ? function (ani) {\n                  return _this.sbAni = ani;\n                } : undefined;\n                mode = getIonMode(this);\n                enteringEl = enteringView.element;\n                leavingEl = leavingView && leavingView.element;\n                animationOpts = Object.assign(Object.assign({\n                  mode: mode,\n                  showGoBack: this.canGoBackSync(enteringView),\n                  baseEl: this.el,\n                  progressCallback: progressCallback,\n                  animated: this.animated && config.getBoolean('animated', true),\n                  enteringEl: enteringEl,\n                  leavingEl: leavingEl\n                }, opts), {\n                  animationBuilder: opts.animationBuilder || this.animation || config.get('navAnimation')\n                });\n                _context7.next = 8;\n                return _transition(animationOpts);\n\n              case 8:\n                _yield$_transition = _context7.sent;\n                hasCompleted = _yield$_transition.hasCompleted;\n                return _context7.abrupt(\"return\", this.transitionFinish(hasCompleted, enteringView, leavingView, opts));\n\n              case 11:\n              case \"end\":\n                return _context7.stop();\n            }\n          }\n        }, _callee7, this);\n      }));\n\n      function transition(_x5, _x6, _x7) {\n        return _transition2.apply(this, arguments);\n      }\n\n      return transition;\n    }()\n  }, {\n    key: \"transitionFinish\",\n    value: function transitionFinish(hasCompleted, enteringView, leavingView, opts) {\n      var cleanupView = hasCompleted ? enteringView : leavingView;\n\n      if (cleanupView) {\n        this.cleanup(cleanupView);\n      }\n\n      return {\n        hasCompleted: hasCompleted,\n        requiresTransition: true,\n        enteringView: enteringView,\n        leavingView: leavingView,\n        direction: opts.direction\n      };\n    }\n  }, {\n    key: \"insertViewAt\",\n    value: function insertViewAt(view, index) {\n      var views = this.views;\n      var existingIndex = views.indexOf(view);\n\n      if (existingIndex > -1) {\n        // this view is already in the stack!!\n        // move it to its new location\n        assert(view.nav === this, 'view is not part of the nav');\n        views.splice(index, 0, views.splice(existingIndex, 1)[0]);\n      } else {\n        assert(!view.nav, 'nav is used'); // this is a new view to add to the stack\n        // create the new entering view\n\n        view.nav = this; // insert the entering view into the correct index in the stack\n\n        views.splice(index, 0, view);\n      }\n    }\n  }, {\n    key: \"removeView\",\n    value: function removeView(view) {\n      assert(view.state === VIEW_STATE_ATTACHED || view.state === VIEW_STATE_DESTROYED, 'view state should be loaded or destroyed');\n      var views = this.views;\n      var index = views.indexOf(view);\n      assert(index > -1, 'view must be part of the stack');\n\n      if (index >= 0) {\n        views.splice(index, 1);\n      }\n    }\n  }, {\n    key: \"destroyView\",\n    value: function destroyView(view) {\n      view._destroy();\n\n      this.removeView(view);\n    }\n    /**\n     * DOM WRITE\n     */\n\n  }, {\n    key: \"cleanup\",\n    value: function cleanup(activeView) {\n      // ok, cleanup time!! Destroy all of the views that are\n      // INACTIVE and come after the active view\n      // only do this if the views exist, though\n      if (this.destroyed) {\n        return;\n      }\n\n      var views = this.views;\n      var activeViewIndex = views.indexOf(activeView);\n\n      for (var i = views.length - 1; i >= 0; i--) {\n        var view = views[i];\n        /**\n         * When inserting multiple views via insertPages\n         * the last page will be transitioned to, but the\n         * others will not be. As a result, a DOM element\n         * will only be created for the last page inserted.\n         * As a result, it is possible to have views in the\n         * stack that do not have `view.element` yet.\n         */\n\n        var element = view.element;\n\n        if (element) {\n          if (i > activeViewIndex) {\n            // this view comes after the active view\n            // let's unload it\n            lifecycle(element, LIFECYCLE_WILL_UNLOAD);\n            this.destroyView(view);\n          } else if (i < activeViewIndex) {\n            // this view comes before the active view\n            // and it is not a portal then ensure it is hidden\n            setPageHidden(element, true);\n          }\n        }\n      }\n    }\n  }, {\n    key: \"canStart\",\n    value: function canStart() {\n      return !!this.swipeGesture && !this.isTransitioning && this.transInstr.length === 0 && this.animationEnabled && this.canGoBackSync();\n    }\n  }, {\n    key: \"onStart\",\n    value: function onStart() {\n      this.queueTrns({\n        removeStart: -1,\n        removeCount: 1,\n        opts: {\n          direction: 'back',\n          progressAnimation: true\n        }\n      }, undefined);\n    }\n  }, {\n    key: \"onMove\",\n    value: function onMove(stepValue) {\n      if (this.sbAni) {\n        this.sbAni.progressStep(stepValue);\n      }\n    }\n  }, {\n    key: \"onEnd\",\n    value: function onEnd(shouldComplete, stepValue, dur) {\n      var _this2 = this;\n\n      if (this.sbAni) {\n        this.animationEnabled = false;\n        this.sbAni.onFinish(function () {\n          _this2.animationEnabled = true;\n        }, {\n          oneTimeCallback: true\n        }); // Account for rounding errors in JS\n\n        var newStepValue = shouldComplete ? -0.001 : 0.001;\n        /**\n         * Animation will be reversed here, so need to\n         * reverse the easing curve as well\n         *\n         * Additionally, we need to account for the time relative\n         * to the new easing curve, as `stepValue` is going to be given\n         * in terms of a linear curve.\n         */\n\n        if (!shouldComplete) {\n          this.sbAni.easing('cubic-bezier(1, 0, 0.68, 0.28)');\n          newStepValue += getTimeGivenProgression([0, 0], [1, 0], [0.68, 0.28], [1, 1], stepValue)[0];\n        } else {\n          newStepValue += getTimeGivenProgression([0, 0], [0.32, 0.72], [0, 1], [1, 1], stepValue)[0];\n        }\n\n        this.sbAni.progressEnd(shouldComplete ? 1 : 0, newStepValue, dur);\n      }\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      return h(\"slot\", null);\n    }\n  }, {\n    key: \"el\",\n    get: function get() {\n      return getElement(this);\n    }\n  }], [{\n    key: \"watchers\",\n    get: function get() {\n      return {\n        \"swipeGesture\": [\"swipeGestureChanged\"],\n        \"root\": [\"rootChanged\"]\n      };\n    }\n  }]);\n\n  return Nav;\n}();\n\nNav.style = navCss;\n\nvar navLink = function navLink(el, routerDirection, component, componentProps, routerAnimation) {\n  var nav = el.closest('ion-nav');\n\n  if (nav) {\n    if (routerDirection === 'forward') {\n      if (component !== undefined) {\n        return nav.push(component, componentProps, {\n          skipIfBusy: true,\n          animationBuilder: routerAnimation\n        });\n      }\n    } else if (routerDirection === 'root') {\n      if (component !== undefined) {\n        return nav.setRoot(component, componentProps, {\n          skipIfBusy: true,\n          animationBuilder: routerAnimation\n        });\n      }\n    } else if (routerDirection === 'back') {\n      return nav.pop({\n        skipIfBusy: true,\n        animationBuilder: routerAnimation\n      });\n    }\n  }\n\n  return Promise.resolve(false);\n};\n\nvar NavLink = /*#__PURE__*/function () {\n  function NavLink(hostRef) {\n    var _this3 = this;\n\n    _classCallCheck(this, NavLink);\n\n    registerInstance(this, hostRef);\n    /**\n     * The transition direction when navigating to another page.\n     */\n\n    this.routerDirection = 'forward';\n\n    this.onClick = function () {\n      return navLink(_this3.el, _this3.routerDirection, _this3.component, _this3.componentProps, _this3.routerAnimation);\n    };\n  }\n\n  _createClass(NavLink, [{\n    key: \"render\",\n    value: function render() {\n      return h(Host, {\n        onClick: this.onClick\n      });\n    }\n  }, {\n    key: \"el\",\n    get: function get() {\n      return getElement(this);\n    }\n  }]);\n\n  return NavLink;\n}();\n\nexport { Nav as ion_nav, NavLink as ion_nav_link };","map":null,"metadata":{},"sourceType":"module"}